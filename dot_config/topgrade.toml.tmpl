no_retry = true
cleanup = true
display_time = true

# see Step in https://github.com/r-darwish/topgrade/blob/master/src/config.rs to find other things to disable
#   rustup                 - manual update step to avoid updating nightly every time
#   gem                    - I think gems + rbenv haven't mixed well
#   tlmgr                  - don't want to update TeX all the time when it's installed
#   gnome_shell_extensions - not relevant on Macos
#   containers             - fails to update from private ECRs
# nightly is, well, nightly, and I think gems and rbenv aren't mixing well
disable = [
  "rustup",
  "gem",
  "tlmgr",
  "containers"
{{- if eq .chezmoi.os "darwin" }},
  "gnome_shell_extensions"
{{ end -}}]

# Custom commands
[commands]
# shims don't auto-update their paths, apparently?
# this can also require a pipx reinstall-all when python versions change
"pyenv rehash" = "pyenv rehash"
"Stable Rust" = "rustup update stable"
"gi() completions" = "fish -c 'gi update-completions'"

[linux]
apt_arguments = "--assume-yes"

# ==============================================================================

# https://raw.githubusercontent.com/r-darwish/topgrade/v9.0.1/config.example.toml
# Don't ask for confirmations
#assume_yes = true

# Disable specific steps - same options as the command line flag
#disable = ["system", "emacs"]

# Ignore failures for these steps
#ignore_failures = ["powershell"]

# Run specific steps - same options as the command line flag
#only = ["system", "emacs"]

# Do not ask to retry failed steps (default: false)
#no_retry = true

# Run inside tmux
#run_in_tmux = true

# List of remote machines with Topgrade installed on them
#remote_topgrades = ["toothless", "pi", "parnas"]

# Arguments to pass SSH when upgrading remote systems
#ssh_arguments = "-o ConnectTimeout=2"

# Path to Topgrade executable on remote machines
#remote_topgrade_path = ".cargo/bin/topgrade"

# Arguments to pass tmux when pulling Repositories
#tmux_arguments = "-S /var/tmux.sock"

# Do not set the terminal title
#set_title = false

# Display the time in step titles
# display_time = true

# Cleanup temporary or old files
#cleanup = true

#[git]
#max_concurrency = 5
# Additional git repositories to pull
#repos = [
#    "~/src/*/",
#    "~/.config/something"
#]

# Don't pull the predefined git repos
#pull_predefined = false

# Arguments to pass Git when pulling Repositories
#arguments = "--rebase --autostash"

#[composer]
#self_update = true

# Commands to run before anything
#[pre_commands]
#"Emacs Snapshot" = "rm -rf ~/.emacs.d/elpa.bak && cp -rl ~/.emacs.d/elpa ~/.emacs.d/elpa.bak"

# Custom commands
#[commands]
#"Python Environment" = "~/dev/.env/bin/pip install -i https://pypi.python.org/simple -U --upgrade-strategy eager jupyter"

#[brew]
#greedy_cask = true

#[linux]
# Arch Package Manager to use. Allowed values: autodetect, trizen, paru, yay, pikaur, pacman.
#arch_package_manager = "pacman"
# Arguments to pass yay (or paru) when updating packages
#yay_arguments = "--nodevel"
#show_arch_news = true
#trizen_arguments = "--devel"
#pikaur_arguments = ""
#enable_tlmgr = true
#emerge_sync_flags = "-q"
#emerge_update_flags = "-uDNa --with-bdeps=y world"
#redhat_distro_sync = false
#rpm_ostree = false

#[windows]
# Manually select Windows updates
#accept_all_updates = false
#open_remotes_in_new_terminal = true

# Causes Topgrade to rename itself during the run to allow package managers
# to upgrade it. Use this only if you installed Topgrade by using a package
# manager such as Scoop to Cargo
#self_rename = true

#[npm]
# Use sudo if the NPM directory isn't owned by the current user
#use_sudo = true

#[firmware]
# Offer to update firmware; if false just check for and display available updates
#upgrade = true

#[flatpak]
# Use sudo for updating the system-wide installation
#use_sudo = true
