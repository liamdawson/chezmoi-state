# frozen_string_literal: true

require "irb"
require "irb/completion"
require "pp"

["pp", "clipboard"].each do |optional_require|
  require optional_require
rescue LoadError
  # carry on
end

def source_for(object, method_sym)
  if object.respond_to?(method_sym, true)
    method = object.method(method_sym)
  elsif object.is_a?(Module)
    method = object.instance_method(method_sym)
  end
  location = method.source_location
  system(%{code --goto #{location[0]}:#{location[1]}}) if location
  location
rescue
  nil
end

class Class
  public :include

  # Show only this class class methods
  def class_methods
    (methods - Class.instance_methods - Object.methods).sort
  end

  # Show instance and class methods
  def defined_methods
    methods = {}

    methods[:instance] = new.local_methods
    methods[:class] = class_methods

    methods
  end
end

class Object
  # Show local methods from the object's class
  def defined_methods
    (methods - Object.instance_methods).sort
  end

  # Open a particular method in an editor
  def ocode(method_name)
    location = source_for(self, method_name)

    puts "Location for '#{method_name}' not found." if location.nil?
  end
end

IRB.conf[:IRB_RC].tap do |prev_rc|
  IRB.conf[:IRB_RC] = proc do
    prev_rc.call unless prev_rc.nil?

    if Object.const_defined?("ActiveRecord::Base")
      ActiveRecord::Base.logger = Logger.new($stdout)
    end
  end
end
